// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List/search images by owner/filters
	// (GET /images)
	ListImages(c *gin.Context, params ListImagesParams)
	// Confirm upload (HEAD against S3), persist metadata
	// (POST /images/confirm)
	ConfirmUpload(c *gin.Context, params ConfirmUploadParams)
	// Create a presigned PUT URL for uploading an image to MinIO/S3
	// (POST /images/presign)
	CreatePresign(c *gin.Context, params CreatePresignParams)
	// Promote images from a product draft to a final product
	// (POST /images/promote)
	PromoteImages(c *gin.Context, params PromoteImagesParams)
	// Delete image (soft or hard, per policy)
	// (DELETE /images/{id})
	DeleteImage(c *gin.Context, id string, params DeleteImageParams)
	// Get image metadata
	// (GET /images/{id})
	GetImage(c *gin.Context, id string)
	// Update image metadata (alt, role, order)
	// (PATCH /images/{id})
	UpdateImage(c *gin.Context, id string)
	// Generate a signed imgproxy URL for delivery with requested params
	// (GET /images/{id}/url)
	GetDeliveryUrl(c *gin.Context, id string, params GetDeliveryUrlParams)
	// Trigger (or retry) variant generation for an image
	// (POST /internal/images/process)
	ProcessImage(c *gin.Context)
	// MinIO/S3 event webhook (ObjectCreated/Delete) for auto-confirm/triggers
	// (POST /internal/webhook/s3)
	S3Webhook(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListImages operation middleware
func (siw *ServerInterfaceWrapper) ListImages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListImagesParams

	// ------------- Optional query parameter "ownerType" -------------

	err = runtime.BindQueryParameter("form", true, false, "ownerType", c.Request.URL.Query(), &params.OwnerType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ownerType: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ownerId" -------------

	err = runtime.BindQueryParameter("form", true, false, "ownerId", c.Request.URL.Query(), &params.OwnerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ownerId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListImages(c, params)
}

// ConfirmUpload operation middleware
func (siw *ServerInterfaceWrapper) ConfirmUpload(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ConfirmUploadParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Idempotency-Key, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Idempotency-Key", valueList[0], &IdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Idempotency-Key: %w", err), http.StatusBadRequest)
			return
		}

		params.IdempotencyKey = &IdempotencyKey

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ConfirmUpload(c, params)
}

// CreatePresign operation middleware
func (siw *ServerInterfaceWrapper) CreatePresign(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePresignParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Idempotency-Key, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Idempotency-Key", valueList[0], &IdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Idempotency-Key: %w", err), http.StatusBadRequest)
			return
		}

		params.IdempotencyKey = &IdempotencyKey

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePresign(c, params)
}

// PromoteImages operation middleware
func (siw *ServerInterfaceWrapper) PromoteImages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PromoteImagesParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Idempotency-Key, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Idempotency-Key", valueList[0], &IdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Idempotency-Key: %w", err), http.StatusBadRequest)
			return
		}

		params.IdempotencyKey = &IdempotencyKey

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PromoteImages(c, params)
}

// DeleteImage operation middleware
func (siw *ServerInterfaceWrapper) DeleteImage(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteImageParams

	// ------------- Optional query parameter "hard" -------------

	err = runtime.BindQueryParameter("form", true, false, "hard", c.Request.URL.Query(), &params.Hard)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hard: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteImage(c, id, params)
}

// GetImage operation middleware
func (siw *ServerInterfaceWrapper) GetImage(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetImage(c, id)
}

// UpdateImage operation middleware
func (siw *ServerInterfaceWrapper) UpdateImage(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateImage(c, id)
}

// GetDeliveryUrl operation middleware
func (siw *ServerInterfaceWrapper) GetDeliveryUrl(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeliveryUrlParams

	// ------------- Optional query parameter "variant" -------------

	err = runtime.BindQueryParameter("form", true, false, "variant", c.Request.URL.Query(), &params.Variant)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter variant: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "w" -------------

	err = runtime.BindQueryParameter("form", true, false, "w", c.Request.URL.Query(), &params.W)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter w: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "h" -------------

	err = runtime.BindQueryParameter("form", true, false, "h", c.Request.URL.Query(), &params.H)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter h: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fit" -------------

	err = runtime.BindQueryParameter("form", true, false, "fit", c.Request.URL.Query(), &params.Fit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", c.Request.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter format: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "quality" -------------

	err = runtime.BindQueryParameter("form", true, false, "quality", c.Request.URL.Query(), &params.Quality)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter quality: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "dpr" -------------

	err = runtime.BindQueryParameter("form", true, false, "dpr", c.Request.URL.Query(), &params.Dpr)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dpr: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ttlSeconds" -------------

	err = runtime.BindQueryParameter("form", true, false, "ttlSeconds", c.Request.URL.Query(), &params.TtlSeconds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ttlSeconds: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDeliveryUrl(c, id, params)
}

// ProcessImage operation middleware
func (siw *ServerInterfaceWrapper) ProcessImage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProcessImage(c)
}

// S3Webhook operation middleware
func (siw *ServerInterfaceWrapper) S3Webhook(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.S3Webhook(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/images", wrapper.ListImages)
	router.POST(options.BaseURL+"/images/confirm", wrapper.ConfirmUpload)
	router.POST(options.BaseURL+"/images/presign", wrapper.CreatePresign)
	router.POST(options.BaseURL+"/images/promote", wrapper.PromoteImages)
	router.DELETE(options.BaseURL+"/images/:id", wrapper.DeleteImage)
	router.GET(options.BaseURL+"/images/:id", wrapper.GetImage)
	router.PATCH(options.BaseURL+"/images/:id", wrapper.UpdateImage)
	router.GET(options.BaseURL+"/images/:id/url", wrapper.GetDeliveryUrl)
	router.POST(options.BaseURL+"/internal/images/process", wrapper.ProcessImage)
	router.POST(options.BaseURL+"/internal/webhook/s3", wrapper.S3Webhook)
}

type ListImagesRequestObject struct {
	Params ListImagesParams
}

type ListImagesResponseObject interface {
	VisitListImagesResponse(w http.ResponseWriter) error
}

type ListImages200JSONResponse struct {
	Items    *[]Image `json:"items,omitempty"`
	Page     *int     `json:"page,omitempty"`
	PageSize *int     `json:"pageSize,omitempty"`
	Total    *int     `json:"total,omitempty"`
}

func (response ListImages200JSONResponse) VisitListImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmUploadRequestObject struct {
	Params ConfirmUploadParams
	Body   *ConfirmUploadJSONRequestBody
}

type ConfirmUploadResponseObject interface {
	VisitConfirmUploadResponse(w http.ResponseWriter) error
}

type ConfirmUpload201JSONResponse Image

func (response ConfirmUpload201JSONResponse) VisitConfirmUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmUpload400JSONResponse Problem

func (response ConfirmUpload400JSONResponse) VisitConfirmUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmUpload404Response struct {
}

func (response ConfirmUpload404Response) VisitConfirmUploadResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ConfirmUpload409Response struct {
}

func (response ConfirmUpload409Response) VisitConfirmUploadResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type CreatePresignRequestObject struct {
	Params CreatePresignParams
	Body   *CreatePresignJSONRequestBody
}

type CreatePresignResponseObject interface {
	VisitCreatePresignResponse(w http.ResponseWriter) error
}

type CreatePresign200JSONResponse PresignResponse

func (response CreatePresign200JSONResponse) VisitCreatePresignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePresign400JSONResponse Problem

func (response CreatePresign400JSONResponse) VisitCreatePresignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PromoteImagesRequestObject struct {
	Params PromoteImagesParams
	Body   *PromoteImagesJSONRequestBody
}

type PromoteImagesResponseObject interface {
	VisitPromoteImagesResponse(w http.ResponseWriter) error
}

type PromoteImages200JSONResponse struct {
	Promoted *[]Image `json:"promoted,omitempty"`
}

func (response PromoteImages200JSONResponse) VisitPromoteImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PromoteImages400Response struct {
}

func (response PromoteImages400Response) VisitPromoteImagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PromoteImages404Response struct {
}

func (response PromoteImages404Response) VisitPromoteImagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PromoteImages409Response struct {
}

func (response PromoteImages409Response) VisitPromoteImagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type DeleteImageRequestObject struct {
	Id     string `json:"id"`
	Params DeleteImageParams
}

type DeleteImageResponseObject interface {
	VisitDeleteImageResponse(w http.ResponseWriter) error
}

type DeleteImage204Response struct {
}

func (response DeleteImage204Response) VisitDeleteImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteImage404Response struct {
}

func (response DeleteImage404Response) VisitDeleteImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetImageRequestObject struct {
	Id string `json:"id"`
}

type GetImageResponseObject interface {
	VisitGetImageResponse(w http.ResponseWriter) error
}

type GetImage200JSONResponse Image

func (response GetImage200JSONResponse) VisitGetImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetImage404Response struct {
}

func (response GetImage404Response) VisitGetImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateImageRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateImageJSONRequestBody
}

type UpdateImageResponseObject interface {
	VisitUpdateImageResponse(w http.ResponseWriter) error
}

type UpdateImage200JSONResponse Image

func (response UpdateImage200JSONResponse) VisitUpdateImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateImage404Response struct {
}

func (response UpdateImage404Response) VisitUpdateImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetDeliveryUrlRequestObject struct {
	Id     string `json:"id"`
	Params GetDeliveryUrlParams
}

type GetDeliveryUrlResponseObject interface {
	VisitGetDeliveryUrlResponse(w http.ResponseWriter) error
}

type GetDeliveryUrl200JSONResponse struct {
	ExpiresAt *time.Time `json:"expiresAt"`
	Url       *string    `json:"url,omitempty"`
}

func (response GetDeliveryUrl200JSONResponse) VisitGetDeliveryUrlResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProcessImageRequestObject struct {
	Body *ProcessImageJSONRequestBody
}

type ProcessImageResponseObject interface {
	VisitProcessImageResponse(w http.ResponseWriter) error
}

type ProcessImage202Response struct {
}

func (response ProcessImage202Response) VisitProcessImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type S3WebhookRequestObject struct {
	Body *S3WebhookJSONRequestBody
}

type S3WebhookResponseObject interface {
	VisitS3WebhookResponse(w http.ResponseWriter) error
}

type S3Webhook204Response struct {
}

func (response S3Webhook204Response) VisitS3WebhookResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List/search images by owner/filters
	// (GET /images)
	ListImages(ctx context.Context, request ListImagesRequestObject) (ListImagesResponseObject, error)
	// Confirm upload (HEAD against S3), persist metadata
	// (POST /images/confirm)
	ConfirmUpload(ctx context.Context, request ConfirmUploadRequestObject) (ConfirmUploadResponseObject, error)
	// Create a presigned PUT URL for uploading an image to MinIO/S3
	// (POST /images/presign)
	CreatePresign(ctx context.Context, request CreatePresignRequestObject) (CreatePresignResponseObject, error)
	// Promote images from a product draft to a final product
	// (POST /images/promote)
	PromoteImages(ctx context.Context, request PromoteImagesRequestObject) (PromoteImagesResponseObject, error)
	// Delete image (soft or hard, per policy)
	// (DELETE /images/{id})
	DeleteImage(ctx context.Context, request DeleteImageRequestObject) (DeleteImageResponseObject, error)
	// Get image metadata
	// (GET /images/{id})
	GetImage(ctx context.Context, request GetImageRequestObject) (GetImageResponseObject, error)
	// Update image metadata (alt, role, order)
	// (PATCH /images/{id})
	UpdateImage(ctx context.Context, request UpdateImageRequestObject) (UpdateImageResponseObject, error)
	// Generate a signed imgproxy URL for delivery with requested params
	// (GET /images/{id}/url)
	GetDeliveryUrl(ctx context.Context, request GetDeliveryUrlRequestObject) (GetDeliveryUrlResponseObject, error)
	// Trigger (or retry) variant generation for an image
	// (POST /internal/images/process)
	ProcessImage(ctx context.Context, request ProcessImageRequestObject) (ProcessImageResponseObject, error)
	// MinIO/S3 event webhook (ObjectCreated/Delete) for auto-confirm/triggers
	// (POST /internal/webhook/s3)
	S3Webhook(ctx context.Context, request S3WebhookRequestObject) (S3WebhookResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListImages operation middleware
func (sh *strictHandler) ListImages(ctx *gin.Context, params ListImagesParams) {
	var request ListImagesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListImages(ctx, request.(ListImagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListImages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListImagesResponseObject); ok {
		if err := validResponse.VisitListImagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConfirmUpload operation middleware
func (sh *strictHandler) ConfirmUpload(ctx *gin.Context, params ConfirmUploadParams) {
	var request ConfirmUploadRequestObject

	request.Params = params

	var body ConfirmUploadJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConfirmUpload(ctx, request.(ConfirmUploadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConfirmUpload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ConfirmUploadResponseObject); ok {
		if err := validResponse.VisitConfirmUploadResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePresign operation middleware
func (sh *strictHandler) CreatePresign(ctx *gin.Context, params CreatePresignParams) {
	var request CreatePresignRequestObject

	request.Params = params

	var body CreatePresignJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePresign(ctx, request.(CreatePresignRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePresign")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePresignResponseObject); ok {
		if err := validResponse.VisitCreatePresignResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PromoteImages operation middleware
func (sh *strictHandler) PromoteImages(ctx *gin.Context, params PromoteImagesParams) {
	var request PromoteImagesRequestObject

	request.Params = params

	var body PromoteImagesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PromoteImages(ctx, request.(PromoteImagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PromoteImages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PromoteImagesResponseObject); ok {
		if err := validResponse.VisitPromoteImagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteImage operation middleware
func (sh *strictHandler) DeleteImage(ctx *gin.Context, id string, params DeleteImageParams) {
	var request DeleteImageRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteImage(ctx, request.(DeleteImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteImageResponseObject); ok {
		if err := validResponse.VisitDeleteImageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetImage operation middleware
func (sh *strictHandler) GetImage(ctx *gin.Context, id string) {
	var request GetImageRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetImage(ctx, request.(GetImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetImageResponseObject); ok {
		if err := validResponse.VisitGetImageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateImage operation middleware
func (sh *strictHandler) UpdateImage(ctx *gin.Context, id string) {
	var request UpdateImageRequestObject

	request.Id = id

	var body UpdateImageJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateImage(ctx, request.(UpdateImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateImageResponseObject); ok {
		if err := validResponse.VisitUpdateImageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDeliveryUrl operation middleware
func (sh *strictHandler) GetDeliveryUrl(ctx *gin.Context, id string, params GetDeliveryUrlParams) {
	var request GetDeliveryUrlRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeliveryUrl(ctx, request.(GetDeliveryUrlRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeliveryUrl")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetDeliveryUrlResponseObject); ok {
		if err := validResponse.VisitGetDeliveryUrlResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProcessImage operation middleware
func (sh *strictHandler) ProcessImage(ctx *gin.Context) {
	var request ProcessImageRequestObject

	var body ProcessImageJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProcessImage(ctx, request.(ProcessImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProcessImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProcessImageResponseObject); ok {
		if err := validResponse.VisitProcessImageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// S3Webhook operation middleware
func (sh *strictHandler) S3Webhook(ctx *gin.Context) {
	var request S3WebhookRequestObject

	var body S3WebhookJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.S3Webhook(ctx, request.(S3WebhookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "S3Webhook")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(S3WebhookResponseObject); ok {
		if err := validResponse.VisitS3WebhookResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
